import requests
import logging
from telegram import Update, BotCommand
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import os
import time
from dotenv import load_dotenv
import sys

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log')      # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)


class RussianAI:
    def __init__(self):
        self.provider = os.getenv("DEFAULT_PROVIDER", "yandexgpt")
        self.conversation_history = []
        self.set_provider(self.provider)

    def set_provider(self, provider: str):
        self.provider = provider.lower()
        self.conversation_history = []

        if self.provider == 'yandexgpt':
            self.api_key = os.getenv('YANDEX_API_KEY')
            self.folder_id = os.getenv('YANDEX_FOLDER_ID')
            self.model = os.getenv('YANDEX_MODEL', 'yandexgpt-lite')
            self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

            if not self.api_key or not self.folder_id:
                logger.error('–ù–µ –∑–∞–¥–∞–Ω—ã –∫–ª—é—á–∏ –æ—Ç —è–Ω–¥–µ–∫—Å –∞–ø–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞!')
                return False

        elif self.provider == "sberai":
            self.api_key = os.getenv("SBER_API_KEY")
            self.model = os.getenv("SBER_MODEL", "GigaChat:latest")
            self.base_url = "https://api.gigachat.dev/v1/chat/completions"

            if not self.api_key:
                logger.error("–ù–µ –∑–∞–¥–∞–Ω SBER_API_KEY")
                return False

        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
            return False

        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider.upper()} ({self.model})")
        return True

    def add_message(self, role: str, content: str):
        self.conversation_history.append({"role": role, "content": content})

    def generate_response(self, user_input: str):
        self.add_message("user", user_input)

        try:
            if self.provider == "yandexgpt":
                return self._yandex_request()
            elif self.provider == "sberai":
                return self._sber_request()
        except Exception as e:
            return f"üö® –û—à–∏–±–∫–∞ API ({self.provider}): {str(e)}"

    def _yandex_request(self):
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json",
            "x-folder-id": self.folder_id
        }

        yandex_messages = [{"role": msg["role"], "text": msg["content"]} for msg in self.conversation_history]

        payload = {
            "modelUri": f"gpt://{self.folder_id}/{self.model}",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 2000
            },
            "messages": yandex_messages
        }

        try:
            response = requests.post(self.base_url, headers=headers, json=payload, timeout=30)

            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return f"–û—à–∏–±–∫–∞ API: {response.text}"

            data = response.json()
            ai_reply = data["result"]["alternatives"][0]["message"]["text"]
            self.add_message("assistant", ai_reply)
            return ai_reply

        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

    def _sber_request(self):
        auth_response = requests.post(
            "https://api.gigachat.dev/v1/oauth/token",
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data={
                "grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                "assertion": self.api_key,
                "scope": "GIGACHAT_API_PERS"
            }
        )

        if auth_response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SberAI: {auth_response.text}")
            return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SberAI"

        auth_data = auth_response.json()
        access_token = auth_data["access_token"]

        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }

        payload = {
            "model": self.model,
            "messages": self.conversation_history,
            "temperature": 0.7,
            "max_tokens": 2000
        }

        response = requests.post(self.base_url, headers=headers, json=payload, timeout=30)

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ SberAI: {response.status_code} - {response.text}")
            return f"–û—à–∏–±–∫–∞ SberAI: {response.text}"

        data = response.json()
        ai_reply = data["choices"][0]["message"]["content"]
        self.add_message("assistant", ai_reply)
        return ai_reply

    def clear_history(self):
        self.conversation_history = []
        logger.info("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")
        return True


ai_assistant = RussianAI()


def start(update: Update, context: CallbackContext) -> None:
    help_text = (
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é:\n'
        f'YandexGPT ({ai_assistant.model if ai_assistant.provider == "yandexgpt" else "–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ /yandex"})\n'
        f'SberAI ({ai_assistant.model if ai_assistant.provider == "sberai" else "–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ /sber"})\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/yandex - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YandexGPT\n'
        '/sber - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SberAI (GigaChat)\n'
        '/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º!'
    )
    update.message.reply_text(help_text)


def switch_to_yandex(update: Update, context: CallbackContext) -> None:
    if ai_assistant.set_provider('yandexgpt'):
        update.message.reply_text(f'‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ YandexGPT ({ai_assistant.model})')
    else:
        update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ YandexGPT')


def switch_to_sber(update: Update, context: CallbackContext) -> None:
    if ai_assistant.set_provider('sberai'):
        update.message.reply_text(f'‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ SberAI ({ai_assistant.model})')
    else:
        update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ SberAI')


def clear_history(update: Update, context: CallbackContext) -> None:
    if ai_assistant.clear_history():
        update.message.reply_text('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!')
    else:
        update.message.reply_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é')


def handle_message(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    if user_input.startswith('/'):
        return

    context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    start_time = time.time()

    try:
        response = ai_assistant.generate_response(user_input)
        elapsed_time = time.time() - start_time

        formatted_response = (
            f"ü§ñ {ai_assistant.provider.upper()} –æ—Ç–≤–µ—á–∞–µ—Ç:\n"
            f"{response}\n"
            f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {elapsed_time:.2f} —Å–µ–∫"
        )
        update.message.reply_text(formatted_response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def set_bot_commands(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("yandex", "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ YandexGPT"),
        BotCommand("sber", "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ SberAI (GigaChat)"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
    ]
    bot.set_my_commands(commands)
    # print("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã") # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


def main():
    if not os.getenv("YANDEX_API_KEY") and not os.getenv("SBER_API_KEY"):
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã API-–∫–ª—é—á–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ!")
        print("–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –¥–ª—è Yandex –∏–ª–∏ SberAI")
        print("–ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞:")
        print("YANDEX_API_KEY=–≤–∞—à_–∫–ª—é—á_—è–Ω–¥–µ–∫—Å")
        print("YANDEX_FOLDER_ID=–≤–∞—à_folder_id")
        print("SBER_API_KEY=–≤–∞—à_–∫–ª—é—á_—Å–±–µ—Ä")
        return

    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return

    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("yandex", switch_to_yandex))
    dispatcher.add_handler(CommandHandler("sber", switch_to_sber))
    dispatcher.add_handler(CommandHandler("clear", clear_history))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    set_bot_commands(updater.bot)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling(
        poll_interval=1,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        timeout=15,
        drop_pending_updates=True
    )
    logger.info("ü§ñ –†–æ—Å—Å–∏–π—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    updater.idle()


if __name__ == '__main__':
    main()